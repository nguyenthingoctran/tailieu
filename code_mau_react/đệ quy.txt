import React, { Component } from 'react';
import { Table } from 'reactstrap';
import randomstring from 'randomstring';
import { F42Context } from "./f42-context";
import { Trans } from "react-i18next";
import { ButtonExport, DropdownExport, ReactCheckBoxTree } from "components/controls/index";
import { Dropdown } from "react-bootstrap";
import { Tree } from 'antd';
import ReactHtmlParser from 'react-html-parser';

const { TreeNode, DirectoryTree } = Tree;
var count_next = 0;

export default class CTLTableWebPath extends Component {
    static contextType = F42Context

    constructor(props) {
        super(props);

        this.state = {};

        this.icons = {
            expandClose: <span className="cui-chevron-right" aria-hidden="true"></span>,
            expandOpen: <span className="cui-chevron-bottom" aria-hidden="true"></span>,
            parentClose: <i className="fa fa-folder-o fa-lg text-primary"></i>,
            parentOpen: <i className="fa fa-folder-open-o fa-lg text-primary"></i>,
            leaf: <i className="fa fa-file-code-o fa-lg text-primary"></i>
        }
    }

    renderCell(row, isParent, depth, full_url) {
        let icon = 'leaf';
        if (isParent === true) {
            icon = 'parentOpen';
            depth -= 1;
        }
        return (
            <tr key={`web-path-row-${randomstring.generate(7)}`}>
                <td style={{ paddingLeft: `${depth * 20}px` , wordBreak: 'break-all'}}>
                    {isParent && this.icons.expandOpen} {this.icons[icon]} {row.url}
                </td>
                <td>
                    <a className="whitespace-normal wordbreak-all" href={full_url} target="_blank">{full_url}</a>
                </td>
            </tr>
        )
    }

    renderRow(item, depth = 0, parent_url = '') {
        depth += 1;

        var _parent_url = parent_url + item.url;
        _parent_url += depth > 1 ? '/' : '';

        if (item.next_note && item.next_note.length > 0) {
            return (
                <React.Fragment key={'node-' + parent_url + item.url}>
                    {this.renderCell(item, true, depth, parent_url + item.url)}
                    {item.next_note.map((child, i) => {
                        return this.renderRow(child, depth, _parent_url);
                    })}
                </React.Fragment>
            );
        } else {
            return (
                <React.Fragment key={'node-' + parent_url + item.url}>
                    {this.renderCell(item, false, depth, parent_url + item.url)}
                </React.Fragment>
            );
        }
    }

    handleExportTreeMap = (export_type) => {
        this.context.handleExportTreeMap(export_type);
    }

    // recursiveLoopDataSiteMap = (data, string_key, pre_url) => {
    //     var list_children = []        
    //     for (const [key, value] of Object.entries(data)) {
    //         count_next += 1;

    //         // Trường hợp url bị rỗng
    //         if (value.url == ""){
    //             var url = <span className="text-danger"> - No Name - </span>
    //         }else{
    //             var url = value.url
    //         }

    //         var next_pre_url = pre_url + "/" + value.url
    //         var children_recursive = {}
    //         children_recursive['title'] = <><span>{url}</span> <a href={next_pre_url} className="url-in-treemap">{next_pre_url}</a></>
    //         children_recursive['value'] = string_key + "-" + key.toString();
    //         children_recursive['key'] = children_recursive['value']
    //         list_children.push(children_recursive)
    //         if (value.next_note.length === 0){
    //             children_recursive['isLeaf'] = true
    //         }else{
    //             var children_1 = this.recursiveLoopDataSiteMap(value.next_note, children_recursive['key'], next_pre_url)
    //             children_recursive['children'] = children_1
    //         }
    //     }
    //     return list_children
    // }

    formatDataReactCheckBoxTree = (data = this.context.data_sitemap, parent_url = '') => {
        if(data.next_note.length == 0) {
            return {
                label: <div className="d-inline"><span>{data.url}</span><a href={parent_url + data.url} target="_blank">{parent_url + data.url}</a></div>,
                value: data.url,
                children: []
            }
        } else {
            let children = [];
            var _parent_url = parent_url + data.url.replace(/\/$/g, '') + '/'
            data.next_note.forEach(item => {
                children.push(this.formatDataReactCheckBoxTree(item, _parent_url));
            });

            return {
                label: <div className="d-inline"><span>{data.url}</span><a href={parent_url + data.url} target="_blank">{parent_url + data.url}</a></div>,
                value: data.url,
                children
            }
        }
    }

    render() {

        var treeData = []
        var count = 0;

        var nodes = this.formatDataReactCheckBoxTree();

        // for (const [key, value] of Object.entries(this.context.data_sitemap)) {
        //     count += 1;
            
        //     if (key === "url") { 
        //         var pre_url = value.substring(0, value.length - 1); // lấy URL và xóa đi ký tự cuối cùng do cộng thừa
        //         var children = {}
        //         children['title'] = <><span>{value}</span> <a href={value} className="url-in-treemap">{value}</a></>;
        //         children['value'] = "0-" + count.toString()
        //         children['key'] = children['value']
        //         treeData.push(children);
        //     }else{
        //         if (value.length > 0) {
        //             children['children'] = this.recursiveLoopDataSiteMap(value, children['value'], pre_url)
        //         }else{
        //             children['isLeaf'] = true
        //         }
        //     }
        // }

        return (
            <>
                {/* Dropdown export */}
                <div className="position-absolute" style={{top: '55px', left: '155px'}}>
                    <DropdownExport>
                        <Dropdown.Item onClick={() => {this.handleExportTreeMap("csv");}}><Trans>lb_csv</Trans></Dropdown.Item>
                        <Dropdown.Item onClick={() => {this.handleExportTreeMap("excel");}}><Trans>lb_excel</Trans></Dropdown.Item>
                    </DropdownExport>                    
                </div>


                {/* <Table bordered className="mt-3">
                    <thead>
                        <tr>
                            <th><Trans>lb_path</Trans></th>
                            <th><Trans>lb_address</Trans></th>
                        </tr>
                    </thead>
                    <tbody>
                        {this.renderRow(this.context.data_sitemap)}
                    </tbody>
                </Table> */}

                {/* Tree map */}
                <ReactCheckBoxTree 
                    nodes={[nodes]}
                />

                {/* <DirectoryTree multiple defaultExpandAll onSelect={this.onSelect} onExpand={this.onExpand} treeData={treeData}>

                </DirectoryTree> */}

            </>
        );
    }
}






style{
    ul.ant-tree{
        margin-top: 20px;

        li  {
            span  {
                i {
                    font-size: 20px;
                }

                .ant-tree-title {
                    padding-top: 4px;
                    display: inline-block;
                    padding-left: 10px;
                }
            }
        }

        .url-in-treemap{
            position: absolute;
            left: 300px;
        }    
    }

    .ant-tree.ant-tree-directory > li span.ant-tree-node-content-wrapper::before, 
    .ant-tree.ant-tree-directory .ant-tree-child-tree > li span.ant-tree-node-content-wrapper::before{
        height:30px !important;
    }
}