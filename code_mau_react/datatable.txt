import { GMTable } from "components/controls/index";

/////////////// data ////////////
Đặt trong constructor 

        this.table_setting = {
            columns: [
                {
                    label: i18next.t("lb_domain"),
                    sort: true,
                    prop: "domain",
                    width: "320",
                    align: "left",
                    render: (data) => {
                        var text_domain = '';
                        if (data.domain === this.props.current_site_url) {
                            text_domain = <>
                                            <i className="fa fa-home text-primary"></i>&nbsp;
                                            <span className="text-primary">{data.domain}</span>
                                        </>
                        }else {
                            text_domain = <span>{data.domain}</span>
                        }
                        return (
                            <>
                                {text_domain}
                            </>
                        )
                    }
                },
                {
                    label: i18next.t("lb_com_level"),
                    prop: "keywords_count",
                    width: "180",
                    align: "left",
                    render: (data) => {
                        var percent_comon  = Math.round( (data.keywords_count / this.props.data_overview_rank.length)*100 );
                        return (
                            <>
                                <PercentProgress 
                                                value={percent_comon}
                                                label={percent_comon+`%`}/>
                            </>)
                    }
                }
            ]
        };

=============================================================================================
=============================== disable button ==============================================
=============================================================================================

{row.is_completed ? 
  <span>
    <ButtonLink className="text-left" width="400" href="" onClick={() => props.onClickDetails(row)}>{row.item_search_name}&nbsp;
      <i className="fa fa-external-link-square small" style={{ color: '#69bfd6' }}></i></ButtonLink>
  </span> : 
  <span className="text-in-table link-disabled" style={{}}>{row.item_search_name}</span>
}



<div className="history-row-setting" style={!row.is_completed ? {opacity: '0.5'} : {}}>

<span className="text-in-table link-disabled" style={{width:'450px'}}>{row.item_search_name}</span>


///////// HTML ////////////////

  render() {
        var total_keyword = this.props.data_overview_rank.length;

        console.log(total_keyword);

        return (
          <div className="m-4">
            <GMTable
              data={this.props.data_competitor}
              columns={this.table_setting.columns}
              total={this.state.total}
              page={this.state.filter.page}
              sortName={this.state.filter.sortName}
              sortOrder={this.state.filter.sortOrder}
              sizePerPage={this.state.filter.sizePerPage}
              onPageChange={this.handleFilterChange}
              onSearchChange={this.handleFilterChange}
              selectable={false}
              prop_key={"domain"}
            />
          </div>
        );
    }

///////////////////////////////////
{
  label: "Actions",
  render : function (){
    return (
      <span>
        <ButtonDetail className="mr-1"/>
        <ButtonDelete />
      </span>
    )
  }
}

//////////////////////////////////////////////////////////
{
  label: i18next.t("lb_actions"),
  prop: "actions",
  className: "action",
  align: "left",
  render: function(row) {
    return (
      <>
        {row.is_pending ? 
          ""
          : 
          <ButtonDetail 
            onClick={() => props.onClickDetails(row)} 
            disabled={row.disabled ? row.disabled : false} 
          />
        }
        
        // props.user_id === this.props.user_id (do không dùng trong class nên ko cần this)
        {row.user_id === props.user_id ?
          <ButtonDelete
            onClick={() => props.onClickDelete(row)}
            disabled={row.disabled ? row.disabled : false}
          /> : ""}
      </>
    );
  }
}

===========================================================================
=========================== TOOLBAR TABLE =================================
===========================================================================
constructor(props) {

  this.tableName = props => {
    return (
      <Row className="w-100 action-bar">
        <Col sm="8">
          <DropdownButton title="Action" variant="light border px-4 mr-2">
            <Dropdown.Item eventKey="1">Delete</Dropdown.Item>
            <Dropdown.Item eventKey="2">Duplicate</Dropdown.Item>
          </DropdownButton>
          <span>
            <ExportCSVButton className="btn-light border"><i className="fa glyphicon glyphicon-export fa-download"></i> Excel</ExportCSVButton>
          </span>
        </Col>
        <Col sm="4" className="text-right">
          <div className="ml-5 mt-2">
            
          </div>
        </Col>
      </Row>
    );
  };

};


  render() {
        return (
          <>
            <GMTable
                btnGroup={this.tableName}
            />
          </>
        );
    }

===========================================================================
============================ NÚT TRONG TABLE ==============================
===========================================================================
this.state = {
    columns: [
      {
        label: i18next.t("lb_keyword"),
        sort: true,
        isKey: true,
        prop: "key",
        // width: "320",
        align: "left",
        render: function(row, cell){
          
          return (
            <div className="d-flex">

              <div className="content-nearby-button d-inline w-100 pr-2">
                <span>
                  {row.key}
                </span>                  
              </div>

              <div className="button-in-table">
                
                <Dropdown className="d-inline">
                  <Dropdown.Toggle variant="light btn-sm border" id="dropdown-basic">
                    More
                  </Dropdown.Toggle>

                  <Dropdown.Menu>
                    <Dropdown.Item onClick={() => props.showRegisterKeywordModal(row)}><Trans>lb_register_keyword</Trans></Dropdown.Item>
                  </Dropdown.Menu>
                </Dropdown>
              </div>

            </div>
          );
        }
      },




    <div className="d-flex wrapper-content-and-button" style={{width: '320px'}}>

      <div className="content-nearby-button-1 d-inline w-100 pr-2">
        <span>
          {row.key}
        </span>                  
      </div>

      <div className="button-in-table-1">
        
        <Dropdown className="d-inline">
          <Dropdown.Toggle variant="light btn-sm border" id="dropdown-basic">
            More
          </Dropdown.Toggle>

          <Dropdown.Menu>
            <Dropdown.Item onClick={() => props.showRegisterKeywordModal(row)}><Trans>lb_register_keyword</Trans></Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>

    </div>

===========================================================================
============================ URL STYLE ====================================
===========================================================================
RENDER: ===================================================================
<>
    <div class="text-url">
        <a href={data.url_rank} target="_blank">{url_rank}&nbsp;</a>
    </div>
    <i className="fa fa-external-link small icon-small-link"></i>
</>

css: ======================================================================
.icon-small-link{
  color: #20a8d8;   
}

// Style url
.text-url {
  position: relative;
  max-width:286px !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  float: left;
}

===========================================================================
============================ Ant Table ====================================
===========================================================================
import React, {Component} from 'react';
import GMCoreUITable from './coreui-table';
import GMAntTable from './ant-table';

export default class GMTable extends Component {
    render() {
        return (<GMAntTable {...this.props} />);
    }
}

===========================================================================
============================ Number of table ==============================
===========================================================================
{
  label: i18next.t("lb_outlinks"),
  width: 120,
  align: "right",
  className: "number-in-table",
  prop: "outlinks",
  sort: true,
  render: function (data) {
    return <>
            <NumberFormat value={data.outlinks.length} displayType={'text'} thousandSeparator={true} renderText={value => <div>{value}</div>} />
          </>;
  }
},
===========================================================================
=========================== Filter of table ===============================
===========================================================================
{
  label: i18next.t("lb_indexability"),
  width: 150,
  prop: "noindex",
  filters: [{ text: 'Indexable', value: false }, { text: 'Non-indexable', value: true }],
  onFilter: (value, record) => record.noindex === value,
  render: function (data) {
    return (
      <>
        {data.noindex === false ? (
          <><span className="badge badge-success">Indexable</span></>

        ) : (
          <><span className="badge badge-danger">Non-indexable</span></>
        )}
      </>
    );
  }
},