==============================================================
==== 3 cột quan trọng để có thể tạo nên một trang web tốt ====
==============================================================
1 - Responsive design
	Fluid Layouts, Media queries
2 - Maintainable and scalable code
	Code rõ ràng, dễ hiểu, có thể tái sử dụng, tổ chức files, đặt tên classes, tổ chức code file html

3 - Web performance
	Giảm request lên website trong 1 khoảng thời gian, giảm lượng dữ liệu phải tải khi load trang (html, css, js, hình ảnh, videos, ...), nén code css và js, đặc biệt sử dụng ít hình ảnh và videos, sử dụng hình ảnh đã được nén bớt dung lượng và hiển thị phù hợp trên website

==============================================================
==================== Cách hoạt động css ======================
==============================================================

- Đầu tiên là brower sẽ "load html", sau đó sẽ "phân tích (parse) code HTML", từ đó browser tạo ra "document object model(DOM)" (có phân cấp theo: parent's element, child's element, ...) ví dụ: thẻ html là cha thẻ body, body là thẻ cha của thẻ head, ...
- Sau khi phân tích code HTML tạo ra DOM, bắt đầu "tìm file stylesheet" để bắt đầu "load CSS" và rồi cũng phân tích code CSS và tạo ra "CSS object model" hay CSSOM (tương tự DOM)
- CSSOM và DOM lưu (store) trong 1 thứ gọi là "render tree", và tiếp tục đến lượt "website sẽ render" sử dụng "Visual formatting model"
- Website được render lên trên browser


Lưu ý: Parse CSS Giống với complite code -> exe để thực thi

==============================================================
======================== Độ ưu tiên ==========================
==============================================================
Độ quan trọng (Importance) > Độ đặc trưng (Specificity) > Thứ tự dòng code (source order)

IMPORTANCE
- User !important declaration
- Author !important declaration
- Author declaration
- User declaration
- Default browser declaration

SPECIFICITY
- Inline styles
- IDs
- Classess, pseudo-classess, attrbute
- Elements, pseudo-elements

SOURCE CODE
- Khai báo cuối cùng (dòng khai báo cuối cùng) sẽ được sử dụng làm giá trị property

==============================================================
=========================== Lưu ý ============================
==============================================================
- "!important" lúc nào cũng được ưu tiên cao nhất
- Chỉ dùng "!important" như sự lựa chọn cuối cùng, tốt hơn nên níu vào SPECIFICITIES, nó sẽ dễ bảo trì và mở rộng hơn
- Sử dụng "inline styles" cũng được nhưng không nên ưu tiên sử dụng (giống !important là khó bảo trì)
- 1 "id" đặc trưng hơn "100 class" và tương tự "1 class" đặc trưng hơn "100 elements"
- Khai báo "*" có thông số so sánh là (0,0,0,0)
- Khi sử dụng CSS từ "file CSS ngoài" (các thư viện, framework css) luôn để "author code" (code của bạn viết) ở cuối

==============================================================
============================= Value ==========================
==============================================================
"Value processing" gồm 6 giai đoạn
Declared value > Cascaded value > Specified value > Computed Value > Used Value > Actual value

Ví dụ:

	<div class="section"> 
	  <p class="amazing">CSS is absoluted amazing</p>
	</div>

	.section {
	  font-size: 1.5rem;
	  width: 280px;
	  background-color: orangered;
	}

	p {
	  width: 140px;
	  background-color: green;
	}

	.amazing {
	  width: 66%
	}

rem
Nếu bạn có font-size mặc định là 16px => 1.5rem khi render ra browse sẽ là 1.5 x 16px = 24px

============================================================
===================== Lưu ý về đơn vị ======================
============================================================

Ví dụ:

	html, body{
	  font-size: 16px;
	  width:80vw;
	}

	.header{
	  font-size: 150%;
	  padding: 2em;
	  margin-bottom: 10rem;
	  height: 90vh;
	  width: 1000px;
	}

	.header-child{
	  font-size: 3em;
	  padding: 10%;
	}

%(font) > 150% > X% * computed fontsize của element cha > 24px
%(kích thước) > 10% > X% * computed fontsize của element cha > 100px

em(font) > 3em > X% * computed fontsize của element cha > 72px (3 * 24)
em(kích thước) > 2em > X% * computed fontsize của element đó > 48px (2 * 24)

rem > 10rem > X * root computed fontsize của browser > 160px

vh > 90vh > X * 1% của viewport height > 90% viewport height

vw > 80vw > X * 1% của viewport width > 80% viewport width

==========================================================
=================== Kế thừa thuộc tính ===================
==========================================================
Mọi "CSS property" đều có giá trị (specified value).
Khi phân tích CSS, sẽ tìm xem có "cascaded property" nào không, nếu có thì giá trị "cascaded" sẽ là giá trị được sử dụng. Nếu không thí sẽ xác định xem property đó có phải là property "có thể thừa kế" được không (color, font-size) (cũng có những property "không thể kế thừa" như "border, padding",...). Nếu có thì sẽ sử dụng computed value của element cha còn không thì sẽ sử dụng giá trị mặc định của browser